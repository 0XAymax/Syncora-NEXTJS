generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(uuid())
  role                 GlobalUserRoles     @default(Regular)
  email                String              @unique
  avatarUrl            String?
  password             String
  name                 String
  lastName             String
  createdAt            DateTime            @default(now())
  Inboxmentions        Inbox[]
  inboxEntries         Inbox[]             @relation("UserInboxRelation")
  recentWorkspaces     RecentWorkspace[]
  tasksCreated         Task[]              @relation("CreatedTasks")
  taskActivities       TaskActivity[]
  assignedBy           TaskAssignee[]      @relation("AssignedBy")
  taskAssignees        TaskAssignee[]
  userActivities       UserActivity[]
  preferences          UserPreferences?
  workspacesOwned      Workspace[]         @relation("OwnerWorkspaces")
  workspaceActivities  WorkspaceActivity[]
  workspaceInvitesSent WorkspaceInvite[]   @relation("InviteSenderRelation")
  workspaceInvites     WorkspaceInvite[]   @relation("InvitedUserRelation")
  invitedBy            WorkspaceMember[]   @relation("InvitedBy")
  workspaceMembership  WorkspaceMember[]
  successorWorkspaces  Workspace[]         @relation("Successor")
  feedbacks            Feedback[]          @relation("FeedbackMessages")
}

model UserPreferences {
  id                       String  @id @default(uuid())
  userId                   String  @unique
  theme                    theme   @default(light)
  notifications            Boolean @default(true)
  emailNotifications       Boolean @default(true)
  taskReminders            Boolean @default(true)
  taskAssignmentAlerts     Boolean @default(true)
  privacyProfileVisibility Boolean @default(true)
  privacyLastSeen          Boolean @default(true)
  taskAutoAccept           Boolean @default(false)
  defaultTaskPriority      String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id               String              @id @default(uuid())
  icon             String?
  name             String
  description      String?
  ownerId          String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @default(now())
  isPersonal       Boolean             @default(false)
  successorId      String?
  successor        User?               @relation("Successor", fields: [successorId], references: [id])
  recentWorkspaces RecentWorkspace[]
  recTasks         RecurringTask[]
  tasks            Task[]
  owner            User?               @relation("OwnerWorkspaces", fields: [ownerId], references: [id])
  activities       WorkspaceActivity[]
  invites          WorkspaceInvite[]
  members          WorkspaceMember[]
}


model WorkspaceMember {
  id          String         @id @default(uuid())
  workspaceId String
  userId      String
  role        WorkspaceRoles @default(member)
  joinedAt    DateTime       @default(now())
  invitedById String?
  invitedBy   User?          @relation("InvitedBy", fields: [invitedById], references: [id])
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}
model Task {
  id            String         @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus     @default(pending)
  priority      TaskPriority
  workspaceId   String
  createdById   String?
  createdAt     DateTime       @default(now())
  dueDate       DateTime
  priorityOrder Int            @default(0)
  createdBy     User?          @relation("CreatedTasks", fields: [createdById], references: [id])
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  activities    TaskActivity[]
  assignees     TaskAssignee[]
}

model RecurringTask {
  id          String             @id @default(uuid())
  title       String
  description String?
  workspaceId String
  created     DateTime           @default(now())
  frequency   RecurringFrequency @default(custom)
  workspace   Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model TaskAssignee {
  id           String   @id @default(uuid())
  taskId       String
  userId       String
  assignedAt   DateTime @default(now())
  assignedById String?
  assignedBy   User?    @relation("AssignedBy", fields: [assignedById], references: [id])
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model TaskActivity {
  id        String           @id @default(uuid())
  taskId    String
  userId    String?
  action    TaskActivityType
  details   Json?
  createdAt DateTime         @default(now())
  task      Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User?            @relation(fields: [userId], references: [id])
}

model WorkspaceActivity {
  id          String                @id @default(uuid())
  workspaceId String
  userId      String?
  action      WorkspaceActivityType
  details     Json?
  createdAt   DateTime              @default(now())
  user        User?                 @relation(fields: [userId], references: [id])
  workspace   Workspace             @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id        String           @id @default(uuid())
  userId    String
  action    UserActivityType
  details   Json?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RecentWorkspace {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  viewedAt    DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  @@unique([userId, workspaceId])
  @@index([viewedAt])
}


model Inbox {
  id        String    @id @default(uuid())
  userId    String
  type      InboxType @default(generic)
  message   String?
  senderId  String?
  details  Json?
  createdAt DateTime  @default(now())
  read      Boolean   @default(false)
  sender    User?     @relation(fields: [senderId], references: [id])
  user      User      @relation("UserInboxRelation", fields: [userId], references: [id], onDelete: Cascade)
}


model WorkspaceInvite {
  id             String       @id @default(uuid())
  workspaceId    String
  invitedUserId  String
  inviteSenderId String
  status         InviteStatus @default(pending)
  createdAt      DateTime     @default(now())
  inviteSender   User         @relation("InviteSenderRelation", fields: [inviteSenderId], references: [id], onDelete: Cascade)
  invitedUser    User         @relation("InvitedUserRelation", fields: [invitedUserId], references: [id], onDelete: Cascade)
  workspace      Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Feedback {
  id          String   @id @default(uuid())
  senderId    String
  message     String
  type        String
  createdAt   DateTime @default(now())
  sender      User     @relation("FeedbackMessages", fields: [senderId], references: [id], onDelete: Cascade)
}

enum WorkspaceRoles {
  admin
  member
  viewer
}

enum GlobalUserRoles {
  Super
  Regular
}

enum TaskStatus {
  pending
  in_progress
  completed
  not_determined
}

enum RecurringFrequency {
  daily
  weekly
  monthly
  custom
}

enum TaskPriority {
  low
  medium
  high
}

enum TaskActivityType {
  created
  updated
  deleted
  assigned
  unassigned
  commented
  status_changed
}

enum WorkspaceActivityType {
  created
  updated
  deleted
  member_added
  member_removed
  role_changed
}

enum UserActivityType {
  logged_in
  logged_out
  profile_updated
  password_changed
  preferences_updated
}

enum TaskAssigneeType {
  assigned
  unassigned
}

enum theme {
  light
  dark
}

enum InboxType {
  workspace_invite          
  workspace_role_updated     
  removed_from_workspace
  workspace_deleted     
  workspace_create
  task_assigned              
  task_updated               
  task_status_changed        
  task_due_soon              
  task_overdue               
  task_comment_added         

  admin_announcement        
  generic                    
}

enum InviteStatus {
  pending
  accepted
  declined
}
